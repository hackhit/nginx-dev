user www-data; # Especifica el usuario bajo el cual se ejecutarán los procesos worker de Nginx. Mejora la seguridad al evitar ejecutar como root.
worker_processes auto; # Número de procesos worker. 'auto' lo establece al número de núcleos de CPU disponibles.
pid /run/nginx.pid; # Ruta del archivo donde Nginx almacenará su ID de proceso (PID).
error_log /var/log/nginx/error.log; # Ruta del archivo de registro principal para errores.
include /etc/nginx/modules-enabled/*.conf; # Incluye archivos de configuración para módulos Nginx habilitados dinámicamente.

events {
    # worker_connections 768; # Valor anterior
    # multi_accept on; # Valor anterior
    worker_connections 16384;  # Número máximo de conexiones simultáneas que cada proceso worker puede manejar. Aumenta la capacidad de carga.
    use epoll;                 # Método de E/S asíncrona más eficiente en Linux para un alto rendimiento.
    accept_mutex off;          # Desactiva el mutex para aceptar nuevas conexiones. Mejor para balanceo de carga con epoll y múltiples workers en sistemas modernos.
    # accept_mutex_delay se elimina porque solo tiene efecto si accept_mutex está activo
}

http {
    ##
    # Configuraciones Básicas
    ##
    charset utf-8; # Establece la codificación de caracteres UTF-8 por defecto para las respuestas.
    # tcp_nopush on; # Valor anterior
    # Agregado recientemente para rendimiento
    tcp_nodelay on; # Desactiva el algoritmo de Nagle. Útil para aplicaciones interactivas donde se envían pequeños paquetes inmediatamente.
    # types_hash_max_size 2048; # Valor anterior
    types_hash_max_size 4096; # Aumenta el tamaño máximo de la tabla hash para tipos MIME, útil si tienes muchos tipos de archivos.
    types_hash_bucket_size 128; # Ajusta el tamaño del bucket para la tabla hash de tipos MIME.
    server_names_hash_bucket_size 128; # Ajusta el tamaño del bucket para la tabla hash de nombres de servidores.
    sendfile on; # Habilita la transferencia eficiente de archivos directamente desde el espacio del kernel al socket, reduciendo copias de datos.
    tcp_nopush on; # Con 'sendfile on', optimiza el envío de paquetes TCP combinando encabezados en un solo paquete inicial.
    server_tokens off; # Oculta la versión de Nginx en las páginas de error y en el encabezado 'Server', mejorando la seguridad.
    include /etc/nginx/mime.types; # Incluye el archivo con la lista de tipos MIME para asociar extensiones de archivo con tipos de contenido.
    default_type application/octet-stream; # Tipo de contenido por defecto si no se encuentra un tipo MIME específico.

    # Seguridad de Búferes - Previene ataques de desbordamiento de búfer
    client_body_buffer_size 16K; # Tamaño del búfer para el cuerpo de la solicitud del cliente. Evita asignaciones de memoria grandes para solicitudes pequeñas.
    client_header_buffer_size 1k; # Tamaño del búfer para los encabezados de la solicitud del cliente.
    client_max_body_size 8m; # Tamaño máximo permitido para el cuerpo de la solicitud del cliente (útil para limitar uploads).
    large_client_header_buffers 4 16k; # Número y tamaño de búferes adicionales para encabezados grandes.

    # Seguridad de Tiempos de Espera - Previene ataques slowloris
    # client_body_timeout 12; # Usando valores por defecto o configurar por servidor/ubicación si es necesario
    # client_header_timeout 12;
    # keepalive_timeout 15; # Usando valor por defecto o configurar por servidor/ubicación
    send_timeout 10; # Tiempo máximo entre dos operaciones de escritura sucesivas en la conexión con el cliente.
    keepalive_requests 100; # Número máximo de solicitudes que se pueden servir a través de una conexión keep-alive.

    # Zonas de Limitación de Tasa - Protección multicapa
    # Crea zonas de memoria compartida para rastrear y limitar la tasa de solicitudes por dirección IP.
    limit_req_zone $binary_remote_addr zone=general:20m rate=10r/s; # Limita a 10 solicitudes por segundo por IP para tráfico general.
    limit_req_zone $binary_remote_addr zone=api:20m rate=5r/s; # Limita a 5 solicitudes por segundo por IP para APIs.
    limit_req_zone $binary_remote_addr zone=login:20m rate=1r/s; # Limita a 1 solicitud por segundo por IP para logins, previene fuerza bruta.
    limit_req_zone $binary_remote_addr zone=search:10m rate=2r/s; # Limita búsquedas a 2 por segundo por IP.
    limit_req_zone $binary_remote_addr zone=upload:10m rate=1r/m; # Limita uploads a 1 por minuto por IP.

    # Limitación de Conexiones - Previene el agotamiento de conexiones
    # Crea zonas de memoria compartida para rastrear y limitar el número de conexiones simultáneas.
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:20m; # Limita el número de conexiones simultáneas por IP.
    limit_conn_zone $server_name zone=conn_limit_per_server:20m; # Limita el número total de conexiones simultáneas por servidor virtual.

    # Seguridad de Métodos de Solicitud
    # Intención: Bloquear métodos desconocidos o predeterminados (cadena vacía).
    # Nota: Esto también bloquea PATCH, TRACE, etc. a menos que se añadan explícitamente a la lista permitida (0).
    map $request_method $limit_method {
        default 1; # Bloquear por defecto (limitado por tasa)
        GET     0; # Permitir
        HEAD    0; # Permitir
        POST    0; # Permitir
        PUT     0; # Permitir
        DELETE  0; # Permitir
        OPTIONS 0; # Permitir
        # Añade otros métodos específicos si son necesarios y seguros
    }

    # Protección contra Bots
    # Mapea el User-Agent del cliente a una variable que indica si está bloqueado.
    map $http_user_agent $blocked_agent {
        default     0; # Permitir por defecto
        ~*[Mm]alicious 1; # Bloquear agentes que contengan 'malicious'
        ~*[Bb]ot       1; # Bloquear agentes que contengan 'bot'
        ~*[Cc]rawler   1; # Bloquear agentes que contengan 'crawler'
        ~*[Ss]pider    1; # Bloquear agentes que contengan 'spider'
        ~*[Ss]canner   1; # Bloquear agentes que contengan 'scanner'
        ~*[Hh]ack      1; # Bloquear agentes que contengan 'hack'
        ~*[Nn]ikto     1; # Bloquear escáner Nikto
        ~*[Ss]qlmap    1; # Bloquear SQLMap
        ~*[Nn]map      1; # Bloquear script de Nmap
        ~*[Mm]asscan   1; # Bloquear Masscan
        ""             1; # Bloquear solicitudes sin User-Agent
    }

    ##
    # Configuraciones SSL
    ##
    ssl_session_timeout 1d; # Tiempo que se mantiene una sesión SSL en caché en el servidor.
    ssl_session_cache shared:SSL:50m; # Define una caché compartida de 50MB para sesiones SSL, mejora el rendimiento de conexiones reutilizadas.
    ssl_session_tickets off; # Desactiva tickets de sesión SSL para mejorar la seguridad frente a ciertos tipos de ataques.

    # Seguridad de Protocolos - Solo protocolos modernos
    ssl_protocols TLSv1.2 TLSv1.3; # Permite solo las versiones más seguras de TLS.
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256'; # Lista de cifrados fuertes y modernos.
    ssl_prefer_server_ciphers off; # Permite al cliente elegir el cifrado preferido, recomendado actualmente.

    # Optimizaciones SSL
    ssl_early_data on; # Habilita TLS 1.3 0-RTT (Early Data). Requiere que la aplicación backend maneje solicitudes idempotentes.
    ssl_buffer_size 4k; # Ajusta el tamaño del búfer SSL para un mejor balance entre latencia y rendimiento.

    # Resolvedores DNS - Múltiples para redundancia
    # Define servidores DNS para que Nginx pueda resolver nombres de host (ej: en proxy_pass).
    # Considera eliminar 'ipv6=off' si tu servidor/resolvedores soportan IPv6
    resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s; # ipv6=off; # Eliminado para permitir resolución IPv6 si está disponible
    resolver_timeout 2s; # Tiempo máximo de espera para una consulta DNS.

    ##
    # Configuraciones de Registro (Logging)
    ##
    # access_log /var/log/nginx/access.log; # Registro de acceso predeterminado (anulado por directivas access_log específicas a continuación)

    ##
    # Configuraciones Gzip
    ##
    # gzip on; # Valor anterior
    # gzip_vary on; # Valor anterior
    # gzip_proxied any; # Valor anterior
    # gzip_comp_level 6; # Valor anterior
    # gzip_buffers 16 8k; # Valor anterior
    # gzip_http_version 1.1; # Valor anterior
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # Valor anterior

    # Compresión Gzip - Optimizada
    gzip on; # Activa la compresión Gzip para respuestas.
    gzip_vary on; # Añade el encabezado 'Vary: Accept-Encoding' para proxies.
    gzip_proxied any; # Habilita Gzip para todas las respuestas proxy.
    gzip_comp_level 6; # Nivel de compresión (1-9). 6 es un buen equilibrio entre velocidad y tamaño.
    gzip_min_length 1000; # Solo comprime respuestas mayores a 1000 bytes.
    # Lista de tipos MIME para los cuales se aplicará la compresión Gzip.
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Caché de Archivos
    # Mantiene metadatos de archivos abiertos en caché para mejorar el rendimiento de acceso a archivos estáticos.
    open_file_cache max=200000 inactive=20s; # Máximo 200,000 entradas, expiran si no se usan en 20s.
    open_file_cache_valid 30s; # Valida la información en caché cada 30 segundos.
    open_file_cache_min_uses 2; # Un archivo debe ser solicitado al menos 2 veces dentro de 'inactive' para permanecer en caché.
    open_file_cache_errors on; # También cachéa errores de apertura de archivos (como 404).

    # ============================================================================================
    # REGISTRO (LOGGING) Y MONITOREO AVANZADO
    # ============================================================================================
    # Formatos de Registro Personalizados
    # Formato principal con información detallada y tiempos de respuesta.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    # Formato de seguridad que incluye información de las reglas de bloqueo.
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'blocked_agent=$blocked_agent limit_method=$limit_method';

    # Formato específico para registros cuando se usa Cloudflare.
    log_format cloudflare '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" $http_cf_ray $http_cf_connecting_ip '
                          '$http_x_forwarded_for $http_x_forwarded_proto '
                          '$http_true_client_ip $http_cf_ipcountry '
                          '$http_cf_visitor $http_cdn_loop';

    # Registro Principal con optimizaciones de rendimiento
    access_log /var/log/nginx/access.log main buffer=64k flush=5m; # Usa búfer de 64KB y escribe cada 5 minutos para reducir I/O.
    error_log /var/log/nginx/error.log warn; # Nivel de registro de errores a 'warn' o superior.

    # Registro de Seguridad
    access_log /var/log/nginx/security.log security buffer=64k flush=5m; # Registro dedicado para eventos de seguridad.

    # Nivel de Registro para Limitaciones
    limit_req_log_level warn; # Nivel de log para eventos de límite de tasa alcanzado.
    limit_conn_log_level warn; # Nivel de log para eventos de límite de conexión alcanzado.

    # ============================================================================================
    # ENCABEZADOS DE SEGURIDAD GLOBALES
    # ============================================================================================
    # Mapa de Encabezados de Seguridad para diferentes tipos de contenido (aplicado condicionalmente)
    # Añade encabezados de seguridad básicos a respuestas HTML.
    map $sent_http_content_type $security_headers {
        default "";
        ~*text/html "X-Frame-Options: SAMEORIGIN; X-Content-Type-Options: nosniff; X-XSS-Protection: 1; mode=block";
        # Considera añadir encabezados para otros tipos (ej., CSP para APIs JSON)
    }

    # Mapa de Política de Seguridad de Contenido (revisa y endurece la política predeterminada)
    # Define políticas CSP diferentes para rutas específicas.
    map $uri $csp_policy {
        # Política predeterminada - Revisa y endurece si es posible (ej., elimina 'unsafe-inline')
        default "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self'  https:; font-src 'self'; connect-src 'self'";
        # Política más estricta para la sección de administración
        ~*/admin "default-src 'self'; script-src 'self'; style-src 'self'; img-src 'self'; font-src 'self'; connect-src 'self'";
    }

    # ============================================================================================
    # OPTIMIZACIONES PROXY & FASTCGI
    # ============================================================================================
    # Configuraciones de Proxy
    # Define una caché para respuestas de servidores proxy upstream.
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;
    proxy_cache_key "$scheme$request_method$host$request_uri"; # Clave única para cachear objetos.
    proxy_cache_methods GET HEAD; # Métodos HTTP que se cachearán.
    proxy_cache_valid 200 304 12h; # Tiempo de validez para códigos 200 y 304.
    proxy_cache_valid any 1m; # Tiempo de validez para otros códigos de estado.
    # proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504; # Descomenta si lo deseas
    proxy_cache_lock on; # Evita el efecto "thundering herd" al cachear.
    proxy_cache_background_update on; # Actualiza objetos en segundo plano mientras se sirve la versión en caché vencida.

    # Configuraciones de Búfer de Proxy
    proxy_buffering on; # Activa el búfer de respuestas proxy.
    proxy_buffer_size 4k; # Tamaño del primer búfer (para encabezados).
    proxy_buffers 8 4k; # Número y tamaño de búferes adicionales para el cuerpo de la respuesta.
    proxy_busy_buffers_size 8k; # Tamaño máximo de búferes que pueden estar ocupados mientras se envían datos al cliente.

    # Configuraciones FastCGI
    # Define una caché para respuestas de servidores FastCGI upstream (ej: PHP-FPM).
    fastcgi_cache_path /var/cache/fastcgi levels=1:2 keys_zone=fcgi:10m max_size=10g inactive=60m use_temp_path=off;
    fastcgi_cache_key "$scheme$request_method$host$request_uri"; # Clave única para cachear objetos FastCGI.
    fastcgi_cache_valid 200 304 12h; # Tiempo de validez para códigos 200 y 304.
    fastcgi_cache_valid any 1m; # Tiempo de validez para otros códigos de estado.
    # fastcgi_cache_use_stale "error" "timeout" "updating" "http_500" "http_502" "http_503" "http_504"; # Descomenta si lo deseas
    fastcgi_cache_lock on; # Evita el efecto "thundering herd" al cachear FastCGI.

    # ============================================================================================
    # CONFIGURACIÓN REALIP (Para Cloudflare)
    # ============================================================================================
    # IPs de Cloudflare - Actualiza regularmente desde https://www.cloudflare.com/ips/
    # Estas directivas permiten que Nginx use la IP real del cliente cuando está detrás de Cloudflare.
    # IPv4
    set_real_ip_from 173.245.48.0/20;
    set_real_ip_from 103.21.244.0/22;
    set_real_ip_from 103.22.200.0/22;
    set_real_ip_from 103.31.4.0/22;
    set_real_ip_from 141.101.64.0/18;
    set_real_ip_from 108.162.192.0/18;
    set_real_ip_from 190.93.240.0/20;
    set_real_ip_from 188.114.96.0/20;
    set_real_ip_from 197.234.240.0/22;
    set_real_ip_from 198.41.128.0/17;
    set_real_ip_from 162.158.0.0/15;
    set_real_ip_from 104.16.0.0/13;
    set_real_ip_from 104.24.0.0/14;
    set_real_ip_from 172.64.0.0/13;
    set_real_ip_from 131.0.72.0/22;
    # IPv6
    set_real_ip_from 2400:cb00::/32;
    set_real_ip_from 2606:4700::/32;
    set_real_ip_from 2803:f800::/32;
    set_real_ip_from 2405:b500::/32;
    set_real_ip_from 2405:8100::/32;
    set_real_ip_from 2a06:98c0::/29;
    set_real_ip_from 2c0f:f248::/32;
    real_ip_header CF-Connecting-IP; # Indica a Nginx qué encabezado HTTP contiene la IP real del cliente de Cloudflare.
    real_ip_recursive on; # Permite confiar en las IPs definidas por 'set_real_ip_from' de forma recursiva.

    ##
    # Configuraciones de Hosts Virtuales
    ##
    include /etc/nginx/conf.d/*.conf; # Incluye archivos de configuración adicionales desde el directorio conf.d.
    include /etc/nginx/sites-enabled/*; # Incluye archivos de configuración de sitios habilitados (enlaces simbólicos desde sites-available).
}

# mail {
#     # Ver script de autenticación de ejemplo en:
#     # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
#
#     # auth_http localhost/auth.php;
#     # pop3_capabilities "TOP" "USER";
#     # imap_capabilities "IMAP4rev1" "UIDPLUS";
#
#     server {
#         listen     localhost:110;
#         protocol   pop3;
#         proxy      on;
#     }
#
#     server {
#         listen     localhost:143;
#         protocol   imap;
#         proxy      on;
#     }
# }
